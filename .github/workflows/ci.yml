name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-test-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: pip
        cache-dependency-path: requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install pytest

    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: python -m pytest -v

    # --- SAST: Semgrep ---
    - name: Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/owasp-top-ten
      env:
        SEMGREP_DISABLE_TELEMETRY: "1"

    # --- Dependency scan: pip-audit ---
    - name: Install pip-audit
      run: python -m pip install pip-audit

    - name: Run pip-audit (fail on vulns)
      run: pip-audit --strict

    # --- Dependency scan: OWASP Dependency-Check ---
    - name: Ensure reports dir exists
      run: rm -rf reports && mkdir -p reports

    - name: OWASP Dependency-Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: devsecops-demo
        path: .
        format: 'HTML,SARIF'
        # Kirjoita suoraan tiedostopolun rungolla -> luo .html ja .sarif
        out: 'reports/dependency-check-report'
        # Varmistetaan skannipolku ja experimental-analyysi
        args: '--enableExperimental --failOnCVSS 7.0 --scan .'
      continue-on-error: true

    - name: Show generated reports
      run: |
        echo "Workspace: $GITHUB_WORKSPACE"
        ls -la
        echo "----- reports dir -----"
        ls -la reports || true

    - name: Locate DC report files
      run: |
        echo "Searching for dependency-check report files..."
        find . -maxdepth 4 -type f -name "dependency-check-report.*" -print || true

    - name: Upload Dependency-Check report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: |
          reports/**
          **/dependency-check-report.html
          **/dependency-check-report.sarif
          **/dependency-check-report.xml
          **/dependency-check-report.json
        if-no-files-found: ignore

    # --- Build Docker image (for image scanning) ---
    - name: Build Docker image
      run: docker build -t devsecops-demo:ci .

    # --- Container scan: Trivy (image) ---
    # exit-code '0' = vain raportti; vaihda '1' jos haluat failata löydöksistä
    - name: Trivy image scan
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: 'devsecops-demo:ci'
        format: 'table'
        ignore-unfixed: true
        severity: 'HIGH,CRITICAL'
        exit-code: '0'

    # --- DAST: OWASP ZAP Baseline ---
    - name: Run app container (for ZAP)
      run: |
        docker run -d --name demoapp \
          -p 5000:5000 \
          -e FLASK_HOST=0.0.0.0 -e PORT=5000 \
          devsecops-demo:ci
        # odota että appi vastaa
        for i in {1..30}; do
          if curl -fsS http://localhost:5000/ >/dev/null; then
            echo "App is up"; exit 0
          fi
          sleep 1
        done
        echo "App did not become ready in time"
        docker logs demoapp || true
        exit 1

    - name: OWASP ZAP Baseline scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:5000'
        cmd_options: '-a -m 3'
        fail_action: false
        allow_issue_writing: false
        artifact_name: 'zap-scan'
      continue-on-error: true

    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: zap-baseline-report
        path: zap-baseline-report.html
        if-no-files-found: warn

    - name: Stop app container
      if: always()
      run: docker rm -f demoapp || true

    # --- Filesystem scan: Trivy (repo) ---
    - name: Trivy filesystem scan
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'table'
        severity: 'HIGH,CRITICAL'
        exit-code: '1'   # failaa jos löytyy High/Critical